{
  "name": "Ezyfox",
  "tagline": "Easy and Convenient to make server-side game applications",
  "body": "# ezyfox\r\n## ezyfox-core\r\n\r\n[![Build Status](https://travis-ci.org/youngmonkeys/ezyfox-core.svg?branch=master)](https://travis-ci.org/youngmonkeys/ezyfox-core)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/5749e142138081000ea4f078/badge.svg?style=flat)](https://www.versioneye.com/user/projects/5749e142138081000ea4f078)\r\n[![Coverage Status](https://coveralls.io/repos/github/youngmonkeys/ezyfox-core/badge.svg?branch=master)](https://coveralls.io/github/youngmonkeys/ezyfox-core?branch=master)\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.tvd12/ezyfox-core/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.tvd12/ezyfox-core)\r\n[![Javadoc](https://javadoc-emblem.rhcloud.com/doc/com.tvd12/ezyfox-core/badge.svg)](http://www.javadoc.io/doc/com.tvd12/ezyfox-core)\r\n\r\n## ezyfox-sfs2x\r\n\r\n[![Build Status](https://travis-ci.org/youngmonkeys/ezyfox-sfs2x.svg?branch=master)](https://travis-ci.org/youngmonkeys/ezyfox-sfs2x)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/574d34c8193d44000d50dd82/badge.svg?style=flat)](https://www.versioneye.com/user/projects/574d34c8193d44000d50dd82)\r\n[![Coverage Status](https://coveralls.io/repos/github/youngmonkeys/ezyfox-sfs2x/badge.svg?branch=master)](https://coveralls.io/github/youngmonkeys/ezyfox-sfs2x?branch=master)\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.tvd12/ezyfox-sfs2x/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.tvd12/ezyfox-sfs2x)\r\n[![Javadoc](https://javadoc-emblem.rhcloud.com/doc/com.tvd12/ezyfox-sfs2x/badge.svg)](http://www.javadoc.io/doc/com.tvd12/ezyfox-sfs2x)\r\n\r\n#Synopsis\r\n\r\nThis project support to create a server side game application more efficiently and more quickly (use smartfox server engine)\r\n\r\n#Code Example\r\n\r\n**1. Handle server ready event**\r\n```java\r\n  @ServerEventHandler(event = ServerEvent.SERVER_READY)\r\n  public class ServerReadyHandler {\r\n    \r\n    public void handle(AppContext context) {\r\n        context.command(CreateRoom.class)\r\n            .agents(RoomProvider.lobby()).execute();\r\n        MyRoom[] rooms = RoomProvider.gameRooms(); \r\n        context.command(CreateRoom.class).agents(rooms).execute();\r\n        for(MyRoom room : rooms) {\r\n            context.command(UpdateRoom.class)\r\n                .toClient(true).room(room).execute();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**2. Handle user join zone event**\r\n```java\r\n  @ServerEventHandler(event = ServerEvent.USER_JOIN_ZONE)\r\n  public class UserJoinZoneHandler {\r\n    public void handle(AppContext context, ApiZone zone, MyUser user) {\r\n        context.command(Log.class).from(this).info(\"user \" + user.getName() \r\n              + \" join zone \" + zone.getName());\r\n        context.command(JoinRoom.class)\r\n            .roomToJoin(\"Lobby\").user(user).execute();\r\n    }\r\n  }\r\n```\r\n\r\n**3. Handle user join room event**\r\n\r\n```java\r\n  @RoomName(\"v\")\r\n  @ServerEventHandler(event = ServerEvent.USER_JOIN_ROOM)\r\n  public class UserJoinRoomHandler {\r\n    public void handle(AppContext context, MyRoom room, MyUser user) {\r\n        context.command(Log.class).from(this).info(\"user \" + user.getName() \r\n              + \" joined room \" + room.getName());\r\n        context.command(Response.class)\r\n            .command(\"1\").recipient(user).data(room).execute();\r\n    }\r\n    \r\n}\r\n```\r\n\r\n**4. Listen a request from client and auto response**\r\n\r\nLet's say you want to listen a \"bet\" request from client and you also you want to response to that client, you can do like this:\r\n\r\n```java\r\n  @Data\r\n  @ClientResponseHandler // use this annotation to auto response to client\r\n  @ClientRequestListener(command = \"2\") // use this annotation to listen a request from client\r\n  public class BetRequestListener {\r\n    @RequestParam(\"1\")\r\n    @ResponseParam(\"1\")\r\n    private int money;\r\n    \r\n    @RequestParam(\"2\")\r\n    @ResponseParam(\"2\")\r\n    private int roomId;\r\n    \r\n    public void execute(AppContext context, VideoPokerUser user) {\r\n        MyRoom room = \r\n                context.command(FindRoom.class).by(roomId);\r\n        context.command(Log.class).from(this).info(\"user {} has just betted {} chips\", \r\n                user.getName(), btype.getMoney());\r\n        user.decreaseMoney(btype.getMoney());\r\n        user.increaseGameMoney(btype.getMoney());\r\n        context.command(UpdateUser.class)\r\n            .toClient(true).user(user).execute();\r\n        context.command(UpdateRoom.class)\r\n            .room(room).toClient(true).execute();\r\n    }\r\n    \r\n}\r\n\r\n```\r\n\r\n**5. Intercept a request from client**\r\n\r\nLet's say you need validate a parameter in a request from client (i.e money in \"bet\" request) you can do:\r\n\r\n```java\r\n  @Data\r\n  @ClientRequestListener(command = \"2\", priority = -1)\r\n  public class BetRequestInterceptor {\r\n    \r\n    @RequestParam(\"1\")\r\n    @ResponseParam(\"1\")\r\n    private int money;\r\n    \r\n    @RequestParam(\"2\")\r\n    @ResponseParam(\"2\")\r\n    private int roomId;\r\n    \r\n    public void execute(AppContext context, VideoPokerUser user) throws Exception {\r\n        if(money <= 0) {\r\n            context.command(Response.class)\r\n                .command(\"2\").recipient(user).execute();\r\n            throw new BadRequestException();\r\n        }\r\n    }\r\n    \r\n}\r\n```\r\n\r\n#Motivation\r\n\r\nWe have used smartfox server engine, we must use key-value object like SFSObject, SFSUser, SFSRoom e.t.c, they make our source code too complex, hard to read, hard to map, example:\r\n\r\n```java\r\n  // public user var\r\n  UserVariable avatarPic = new SFSUserVariable(\"pic\", \"GonzoTheGreat.jpg\");\r\n   \r\n  // private user var\r\n  UserVariable dbId = new SFSUserVariable(\"dbId\", databaseId);\r\n  dbId.setHidden(true);\r\n     \r\n  // Set variables via the server side API\r\n  getApi().setUserVariables(user, Arrays.asList(avatarPic, dbId));\r\n```\r\n\r\nWe must spend a lot of time to declare, init variables. Some time we also have two or three user agent for each game, and mapping an user agent to key-value object is hard. We think using POJO is good idea, so we make this project.\r\n\r\n#Installation\r\n\r\n```xml\r\n\t<dependency>\r\n\t\t<groupId>com.tvd12</groupId>\r\n\t\t<artifactId>ezyfox-core</artifactId>\r\n\t\t<version>1.0.5</version>\r\n\t</dependency>\r\n\t<dependency>\r\n\t\t<groupId>com.tvd12</groupId>\r\n\t\t<artifactId>ezyfox-sfs2x</artifactId>\r\n\t\t<version>1.0.5</version>\r\n\t</dependency>\r\n```\r\n\r\n#API Reference\r\n\r\nhttp://www.javadoc.io/doc/com.tvd12/ezyfox-core\r\n\r\n#Tests\r\n\r\nmvn test\r\n\r\n#Contributors\r\n\r\n- Project management \r\n  - [NamCV](mailto:cungvinhnam@gmail.com)\r\n- Project development\r\n - [DungTV](mailto:dungtv192@gmail.com)\r\n- Project documentation\r\n - [DungTV](mailto:dungtv192@gmail.com)\r\n - [DatNT](mailto:dat.fithou@gmail.com)\r\n\r\n#License\r\n\r\n- Apache License, Version 2.0\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}